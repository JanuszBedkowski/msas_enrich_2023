<launch>

  <include file="$(find jackal_bringup)/launch/include/move_base.launch" />



  <node pkg="tf" type="static_transform_publisher" name="tf_front_laser" args="0.3 0 0.25 0 0 0 base_link front_laser 100"/>


  <node pkg="lms1xx" name="lms1xx" type="LMS1xx_node">
    <param name="host" value="192.168.1.205" />
    <param name="frame_id" value="front_laser" />
    <remap from="scan" to="front/scan" />
  </node>

  <include file="$(find jackal_description)/launch/description.launch" />

  <node pkg="mandala_small_rot" type="swing.py" name="mandala_small_rot"/>

  <node pkg="jackal_base" type="jackal_node" name="jackal_node">
    <param name="wireless_interface" value="wlan0" />
    <param name="port" value="/dev/ttyACM0"/>
  </node>

  <!-- TODO: Eliminate this by compiling the necessary message definitions into jackal_base. -->
  <node pkg="rosserial_python" type="message_info_service.py" name="rosserial_message_info" />

  <!-- Translate Sentence messages from the MCU to NavSatFix messages -->
  <node pkg="nmea_navsat_driver" type="nmea_topic_driver" name="nmea_topic_driver" ns="navsat" />

  <!-- Filter raw gyro data into a usable IMU message -->
  <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter">
    <rosparam file="/home/robot/catkin_ws/src/jackal_robot/jackal_base/config/mag_config_default.yaml" />
    <rosparam>
      gain: 0.1
      zeta: 0.001
      publish_tf: false
    </rosparam>
  </node>

  <!-- Differential controller and basic localization -->
  <include file="$(find jackal_control)/launch/control.launch" />

  <!-- Teleoperation via joystick and rviz interactive markers -->
  <include file="$(find jackal_control)/launch/teleop.launch" />

  <!-- Diagnostic Aggregator for robot monitor usage -->
  <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator">
    <rosparam command="load" file="$(find jackal_base)/config/diagnostic_analyzers.yaml" />
  </node>



<group ns="optris">

  <node name="optris_imager_node" pkg="optris_drivers" type="optris_imager_node" output="screen">
    <!-- Set configuration file of your camera here! -->
    <param name="xmlConfig"      type="string" value="$(find optris_drivers)/config/generic.xml"/>
  </node>

  <node name="optris_colorconvert_node" pkg="optris_drivers" type="optris_colorconvert_node" output="screen">
    <param name="palette"            type="int"    value="6"/>                              <!-- see ImageBuilder.h for valid values -->
    <param name="paletteScaling"     type="int"    value="2"/>                              <!-- scaling method for color conversion, see ImageBuilder.h -->
    <param name="temperatureMin"     type="double" value="20"/>                             <!-- set minimum temperature for fixed scaling -->
    <param name="temperatureMax"     type="double" value="40"/>                             <!-- set maximum temperature for fixed scaling -->
    <param name="looprate"           type="double" value="30"/>                             <!-- set frame rate to publish images -->
    <param name="camera_name"        type="string" value="optris_imager"/>        <!-- set camera name -->
    <param name="camera_info_url"    type="string" value="file://$(optenv ROS_HOME /tmp/.ros)/camera_info/optris_imager.yaml"/> <!-- set camera_info_url containing camera calibration -->
    <!-- Uncomment the following line, if you want to use PNG compression. Use rosrun dynamic_reconfigure reconfigure_gui to pick PNG format -->
    <!-- <param name="image_transport" type="string" value="compressed"/> -->
  </node>

  <!--
   <node name="optris_binary_image_node" pkg="optris_drivers" type="optris_binary_image_node">  </node>
  -->

  <!-- start image_proc to remove lens distortion from the IR-image. The undistorted image is advertised under topic "/optris/image_rect_color" -->
  <node name="image_proc" pkg="image_proc" type="image_proc"/>

</group>








  <node pkg="tf" type="static_transform_publisher" name="tf_velodyne_mount" args="0 0 0.25 0 0 0 mid_mount velodyne 100"/>


  <arg name="calibration" default="$(find velodyne_pointcloud)/params/VLP16db.yaml"/>
  <arg name="device_ip" default="192.168.1.201" />
  <arg name="frame_id" default="velodyne" />
  <arg name="manager" default="velodyne_nodelet_manager" />
  <arg name="max_range" default="130.0" />
  <arg name="min_range" default="0.4" />
  <arg name="pcap" default="" />
  <arg name="port" default="2368" />
  <arg name="read_fast" default="false" />
  <arg name="read_once" default="false" />
  <arg name="repeat_delay" default="0.0" />
  <arg name="rpm" default="600.0" />

  <!-- start nodelet manager and driver nodelets -->
  <include file="$(find velodyne_driver)/launch/nodelet_manager.launch">
    <arg name="device_ip" value="$(arg device_ip)"/>
    <arg name="frame_id" value="$(arg frame_id)"/>
    <arg name="manager" value="$(arg manager)" />
    <arg name="model" value="VLP16"/>
    <arg name="pcap" value="$(arg pcap)"/>
    <arg name="port" value="$(arg port)"/>
    <arg name="read_fast" value="$(arg read_fast)"/>
    <arg name="read_once" value="$(arg read_once)"/>
    <arg name="repeat_delay" value="$(arg repeat_delay)"/>
    <arg name="rpm" value="$(arg rpm)"/>
  </include>

  <!-- start cloud nodelet -->
  <include file="$(find velodyne_pointcloud)/launch/cloud_nodelet.launch">
    <arg name="calibration" value="$(arg calibration)"/>
    <arg name="manager" value="$(arg manager)" />
    <arg name="max_range" value="$(arg max_range)"/>
    <arg name="min_range" value="$(arg min_range)"/>
  </include>






  <node pkg="pointgrey" type="grasshopper3" name="pointgrey_grasshopper3"/>
  <node pkg="image_transport" type="republish" name="republish_rgb" args="raw in:=/image_raw compressed out:=/image_raw"/>




</launch>
